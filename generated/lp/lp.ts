// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class AzuroBetChanged extends ethereum.Event {
  get params(): AzuroBetChanged__Params {
    return new AzuroBetChanged__Params(this);
  }
}

export class AzuroBetChanged__Params {
  _event: AzuroBetChanged;

  constructor(event: AzuroBetChanged) {
    this._event = event;
  }

  get newAzuroBet(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class BetterWin extends ethereum.Event {
  get params(): BetterWin__Params {
    return new BetterWin__Params(this);
  }
}

export class BetterWin__Params {
  _event: BetterWin;

  constructor(event: BetterWin) {
    this._event = event;
  }

  get better(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ClaimTimeoutChanged extends ethereum.Event {
  get params(): ClaimTimeoutChanged__Params {
    return new ClaimTimeoutChanged__Params(this);
  }
}

export class ClaimTimeoutChanged__Params {
  _event: ClaimTimeoutChanged;

  constructor(event: ClaimTimeoutChanged) {
    this._event = event;
  }

  get newClaimTimeout(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class DaoRewardChanged extends ethereum.Event {
  get params(): DaoRewardChanged__Params {
    return new DaoRewardChanged__Params(this);
  }
}

export class DaoRewardChanged__Params {
  _event: DaoRewardChanged;

  constructor(event: DaoRewardChanged) {
    this._event = event;
  }

  get newDaoFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class lpInitialized extends ethereum.Event {
  get params(): lpInitialized__Params {
    return new lpInitialized__Params(this);
  }
}

export class lpInitialized__Params {
  _event: lpInitialized;

  constructor(event: lpInitialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class LiquidityAdded extends ethereum.Event {
  get params(): LiquidityAdded__Params {
    return new LiquidityAdded__Params(this);
  }
}

export class LiquidityAdded__Params {
  _event: LiquidityAdded;

  constructor(event: LiquidityAdded) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get leaf(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LiquidityRemoved extends ethereum.Event {
  get params(): LiquidityRemoved__Params {
    return new LiquidityRemoved__Params(this);
  }
}

export class LiquidityRemoved__Params {
  _event: LiquidityRemoved;

  constructor(event: LiquidityRemoved) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get leaf(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LiquidityRequested extends ethereum.Event {
  get params(): LiquidityRequested__Params {
    return new LiquidityRequested__Params(this);
  }
}

export class LiquidityRequested__Params {
  _event: LiquidityRequested;

  constructor(event: LiquidityRequested) {
    this._event = event;
  }

  get requestWallet(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get requestedValueLp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MinDepoChanged extends ethereum.Event {
  get params(): MinDepoChanged__Params {
    return new MinDepoChanged__Params(this);
  }
}

export class MinDepoChanged__Params {
  _event: MinDepoChanged;

  constructor(event: MinDepoChanged) {
    this._event = event;
  }

  get newMinDepo(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class NewBet extends ethereum.Event {
  get params(): NewBet__Params {
    return new NewBet__Params(this);
  }
}

export class NewBet__Params {
  _event: NewBet;

  constructor(event: NewBet) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get betId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get conditionId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get outcomeId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get odds(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get fund1(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get fund2(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class OracleRewardChanged extends ethereum.Event {
  get params(): OracleRewardChanged__Params {
    return new OracleRewardChanged__Params(this);
  }
}

export class OracleRewardChanged__Params {
  _event: OracleRewardChanged;

  constructor(event: OracleRewardChanged) {
    this._event = event;
  }

  get newOracleFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class lpOwnershipTransferred extends ethereum.Event {
  get params(): lpOwnershipTransferred__Params {
    return new lpOwnershipTransferred__Params(this);
  }
}

export class lpOwnershipTransferred__Params {
  _event: lpOwnershipTransferred;

  constructor(event: lpOwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PeriodChanged extends ethereum.Event {
  get params(): PeriodChanged__Params {
    return new PeriodChanged__Params(this);
  }
}

export class PeriodChanged__Params {
  _event: PeriodChanged;

  constructor(event: PeriodChanged) {
    this._event = event;
  }

  get newPeriod(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ReinforcementAbilityChanged extends ethereum.Event {
  get params(): ReinforcementAbilityChanged__Params {
    return new ReinforcementAbilityChanged__Params(this);
  }
}

export class ReinforcementAbilityChanged__Params {
  _event: ReinforcementAbilityChanged;

  constructor(event: ReinforcementAbilityChanged) {
    this._event = event;
  }

  get newReinforcementAbility(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class WithdrawTimeoutChanged extends ethereum.Event {
  get params(): WithdrawTimeoutChanged__Params {
    return new WithdrawTimeoutChanged__Params(this);
  }
}

export class WithdrawTimeoutChanged__Params {
  _event: WithdrawTimeoutChanged;

  constructor(event: WithdrawTimeoutChanged) {
    this._event = event;
  }

  get newWithdrawTimeout(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class coreChanged extends ethereum.Event {
  get params(): coreChanged__Params {
    return new coreChanged__Params(this);
  }
}

export class coreChanged__Params {
  _event: coreChanged;

  constructor(event: coreChanged) {
    this._event = event;
  }

  get newCore(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class lp__treeNodeResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getUpdateId(): BigInt {
    return this.value0;
  }

  getAmount(): BigInt {
    return this.value1;
  }
}

export class lp__viewPayoutResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): boolean {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class lp extends ethereum.SmartContract {
  static bind(address: Address): lp {
    return new lp("lp", address);
  }

  azuroBet(): Address {
    let result = super.call("azuroBet", "azuroBet():(address)", []);

    return result[0].toAddress();
  }

  try_azuroBet(): ethereum.CallResult<Address> {
    let result = super.tryCall("azuroBet", "azuroBet():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bet(
    conditionId: BigInt,
    amount: BigInt,
    outcomeId: BigInt,
    deadline: BigInt,
    minOdds: BigInt
  ): BigInt {
    let result = super.call(
      "bet",
      "bet(uint256,uint128,uint64,uint64,uint64):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(conditionId),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(outcomeId),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromUnsignedBigInt(minOdds)
      ]
    );

    return result[0].toBigInt();
  }

  try_bet(
    conditionId: BigInt,
    amount: BigInt,
    outcomeId: BigInt,
    deadline: BigInt,
    minOdds: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "bet",
      "bet(uint256,uint128,uint64,uint64,uint64):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(conditionId),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(outcomeId),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromUnsignedBigInt(minOdds)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  betFor(
    bettor: Address,
    conditionId: BigInt,
    amount: BigInt,
    outcomeId: BigInt,
    deadline: BigInt,
    minOdds: BigInt
  ): BigInt {
    let result = super.call(
      "betFor",
      "betFor(address,uint256,uint128,uint64,uint64,uint64):(uint256)",
      [
        ethereum.Value.fromAddress(bettor),
        ethereum.Value.fromUnsignedBigInt(conditionId),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(outcomeId),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromUnsignedBigInt(minOdds)
      ]
    );

    return result[0].toBigInt();
  }

  try_betFor(
    bettor: Address,
    conditionId: BigInt,
    amount: BigInt,
    outcomeId: BigInt,
    deadline: BigInt,
    minOdds: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "betFor",
      "betFor(address,uint256,uint128,uint64,uint64,uint64):(uint256)",
      [
        ethereum.Value.fromAddress(bettor),
        ethereum.Value.fromUnsignedBigInt(conditionId),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(outcomeId),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromUnsignedBigInt(minOdds)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimTimeout(): BigInt {
    let result = super.call("claimTimeout", "claimTimeout():(uint64)", []);

    return result[0].toBigInt();
  }

  try_claimTimeout(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("claimTimeout", "claimTimeout():(uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  core(): Address {
    let result = super.call("core", "core():(address)", []);

    return result[0].toAddress();
  }

  try_core(): ethereum.CallResult<Address> {
    let result = super.tryCall("core", "core():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  daoFee(): BigInt {
    let result = super.call("daoFee", "daoFee():(uint128)", []);

    return result[0].toBigInt();
  }

  try_daoFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("daoFee", "daoFee():(uint128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getLeaf(): BigInt {
    let result = super.call("getLeaf", "getLeaf():(uint48)", []);

    return result[0].toBigInt();
  }

  try_getLeaf(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getLeaf", "getLeaf():(uint48)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLeavesAmount(
    node: BigInt,
    begin: BigInt,
    end: BigInt,
    l: BigInt,
    r: BigInt
  ): BigInt {
    let result = super.call(
      "getLeavesAmount",
      "getLeavesAmount(uint48,uint48,uint48,uint48,uint48):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(node),
        ethereum.Value.fromUnsignedBigInt(begin),
        ethereum.Value.fromUnsignedBigInt(end),
        ethereum.Value.fromUnsignedBigInt(l),
        ethereum.Value.fromUnsignedBigInt(r)
      ]
    );

    return result[0].toBigInt();
  }

  try_getLeavesAmount(
    node: BigInt,
    begin: BigInt,
    end: BigInt,
    l: BigInt,
    r: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLeavesAmount",
      "getLeavesAmount(uint48,uint48,uint48,uint48,uint48):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(node),
        ethereum.Value.fromUnsignedBigInt(begin),
        ethereum.Value.fromUnsignedBigInt(end),
        ethereum.Value.fromUnsignedBigInt(l),
        ethereum.Value.fromUnsignedBigInt(r)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getParent(fromNumber: BigInt): BigInt {
    let result = super.call("getParent", "getParent(uint48):(uint48)", [
      ethereum.Value.fromUnsignedBigInt(fromNumber)
    ]);

    return result[0].toBigInt();
  }

  try_getParent(fromNumber: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getParent", "getParent(uint48):(uint48)", [
      ethereum.Value.fromUnsignedBigInt(fromNumber)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPossibilityOfReinforcement(reinforcementAmount: BigInt): boolean {
    let result = super.call(
      "getPossibilityOfReinforcement",
      "getPossibilityOfReinforcement(uint128):(bool)",
      [ethereum.Value.fromUnsignedBigInt(reinforcementAmount)]
    );

    return result[0].toBoolean();
  }

  try_getPossibilityOfReinforcement(
    reinforcementAmount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getPossibilityOfReinforcement",
      "getPossibilityOfReinforcement(uint128):(bool)",
      [ethereum.Value.fromUnsignedBigInt(reinforcementAmount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getReserve(): BigInt {
    let result = super.call("getReserve", "getReserve():(uint128)", []);

    return result[0].toBigInt();
  }

  try_getReserve(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getReserve", "getReserve():(uint128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastClaimDao(): BigInt {
    let result = super.call("lastClaimDao", "lastClaimDao():(uint64)", []);

    return result[0].toBigInt();
  }

  try_lastClaimDao(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastClaimDao", "lastClaimDao():(uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastClaimOracle(): BigInt {
    let result = super.call(
      "lastClaimOracle",
      "lastClaimOracle():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastClaimOracle(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastClaimOracle",
      "lastClaimOracle():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lockedLiquidity(): BigInt {
    let result = super.call(
      "lockedLiquidity",
      "lockedLiquidity():(uint128)",
      []
    );

    return result[0].toBigInt();
  }

  try_lockedLiquidity(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lockedLiquidity",
      "lockedLiquidity():(uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minDepo(): BigInt {
    let result = super.call("minDepo", "minDepo():(uint128)", []);

    return result[0].toBigInt();
  }

  try_minDepo(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minDepo", "minDepo():(uint128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  multiplier(): BigInt {
    let result = super.call("multiplier", "multiplier():(uint64)", []);

    return result[0].toBigInt();
  }

  try_multiplier(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("multiplier", "multiplier():(uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nextNode(): BigInt {
    let result = super.call("nextNode", "nextNode():(uint48)", []);

    return result[0].toBigInt();
  }

  try_nextNode(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nextNode", "nextNode():(uint48)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nodeWithdrawView(leaf: BigInt): BigInt {
    let result = super.call(
      "nodeWithdrawView",
      "nodeWithdrawView(uint48):(uint128)",
      [ethereum.Value.fromUnsignedBigInt(leaf)]
    );

    return result[0].toBigInt();
  }

  try_nodeWithdrawView(leaf: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nodeWithdrawView",
      "nodeWithdrawView(uint48):(uint128)",
      [ethereum.Value.fromUnsignedBigInt(leaf)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  oracleFee(): BigInt {
    let result = super.call("oracleFee", "oracleFee():(uint128)", []);

    return result[0].toBigInt();
  }

  try_oracleFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("oracleFee", "oracleFee():(uint128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  realDaoRewards(): BigInt {
    let result = super.call("realDaoRewards", "realDaoRewards():(int128)", []);

    return result[0].toBigInt();
  }

  try_realDaoRewards(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "realDaoRewards",
      "realDaoRewards():(int128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  realOracleRewards(): BigInt {
    let result = super.call(
      "realOracleRewards",
      "realOracleRewards():(int128)",
      []
    );

    return result[0].toBigInt();
  }

  try_realOracleRewards(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "realOracleRewards",
      "realOracleRewards():(int128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reinforcementAbility(): BigInt {
    let result = super.call(
      "reinforcementAbility",
      "reinforcementAbility():(uint128)",
      []
    );

    return result[0].toBigInt();
  }

  try_reinforcementAbility(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "reinforcementAbility",
      "reinforcementAbility():(uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalDaoRewards(): BigInt {
    let result = super.call(
      "totalDaoRewards",
      "totalDaoRewards():(uint128)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalDaoRewards(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalDaoRewards",
      "totalDaoRewards():(uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  treeNode(param0: BigInt): lp__treeNodeResult {
    let result = super.call("treeNode", "treeNode(uint48):(uint64,uint128)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return new lp__treeNodeResult(result[0].toBigInt(), result[1].toBigInt());
  }

  try_treeNode(param0: BigInt): ethereum.CallResult<lp__treeNodeResult> {
    let result = super.tryCall(
      "treeNode",
      "treeNode(uint48):(uint64,uint128)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new lp__treeNodeResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  updateId(): BigInt {
    let result = super.call("updateId", "updateId():(uint64)", []);

    return result[0].toBigInt();
  }

  try_updateId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("updateId", "updateId():(uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  viewPayout(tokenId: BigInt): lp__viewPayoutResult {
    let result = super.call(
      "viewPayout",
      "viewPayout(uint256):(bool,uint128)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return new lp__viewPayoutResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_viewPayout(tokenId: BigInt): ethereum.CallResult<lp__viewPayoutResult> {
    let result = super.tryCall(
      "viewPayout",
      "viewPayout(uint256):(bool,uint128)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new lp__viewPayoutResult(value[0].toBoolean(), value[1].toBigInt())
    );
  }

  withdrawTimeout(): BigInt {
    let result = super.call(
      "withdrawTimeout",
      "withdrawTimeout():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_withdrawTimeout(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawTimeout",
      "withdrawTimeout():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawals(param0: BigInt): BigInt {
    let result = super.call("withdrawals", "withdrawals(uint48):(uint64)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_withdrawals(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("withdrawals", "withdrawals(uint48):(uint64)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddLiquidityCall extends ethereum.Call {
  get inputs(): AddLiquidityCall__Inputs {
    return new AddLiquidityCall__Inputs(this);
  }

  get outputs(): AddLiquidityCall__Outputs {
    return new AddLiquidityCall__Outputs(this);
  }
}

export class AddLiquidityCall__Inputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AddLiquidityCall__Outputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }
}

export class AddLiquidityNativeCall extends ethereum.Call {
  get inputs(): AddLiquidityNativeCall__Inputs {
    return new AddLiquidityNativeCall__Inputs(this);
  }

  get outputs(): AddLiquidityNativeCall__Outputs {
    return new AddLiquidityNativeCall__Outputs(this);
  }
}

export class AddLiquidityNativeCall__Inputs {
  _call: AddLiquidityNativeCall;

  constructor(call: AddLiquidityNativeCall) {
    this._call = call;
  }
}

export class AddLiquidityNativeCall__Outputs {
  _call: AddLiquidityNativeCall;

  constructor(call: AddLiquidityNativeCall) {
    this._call = call;
  }
}

export class AddReserveCall extends ethereum.Call {
  get inputs(): AddReserveCall__Inputs {
    return new AddReserveCall__Inputs(this);
  }

  get outputs(): AddReserveCall__Outputs {
    return new AddReserveCall__Outputs(this);
  }
}

export class AddReserveCall__Inputs {
  _call: AddReserveCall;

  constructor(call: AddReserveCall) {
    this._call = call;
  }

  get initReserve(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get finalReserve(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get leaf(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddReserveCall__Outputs {
  _call: AddReserveCall;

  constructor(call: AddReserveCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BetCall extends ethereum.Call {
  get inputs(): BetCall__Inputs {
    return new BetCall__Inputs(this);
  }

  get outputs(): BetCall__Outputs {
    return new BetCall__Outputs(this);
  }
}

export class BetCall__Inputs {
  _call: BetCall;

  constructor(call: BetCall) {
    this._call = call;
  }

  get conditionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get outcomeId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get minOdds(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class BetCall__Outputs {
  _call: BetCall;

  constructor(call: BetCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BetForCall extends ethereum.Call {
  get inputs(): BetForCall__Inputs {
    return new BetForCall__Inputs(this);
  }

  get outputs(): BetForCall__Outputs {
    return new BetForCall__Outputs(this);
  }
}

export class BetForCall__Inputs {
  _call: BetForCall;

  constructor(call: BetForCall) {
    this._call = call;
  }

  get bettor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get conditionId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get outcomeId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get minOdds(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class BetForCall__Outputs {
  _call: BetForCall;

  constructor(call: BetForCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BetNativeCall extends ethereum.Call {
  get inputs(): BetNativeCall__Inputs {
    return new BetNativeCall__Inputs(this);
  }

  get outputs(): BetNativeCall__Outputs {
    return new BetNativeCall__Outputs(this);
  }
}

export class BetNativeCall__Inputs {
  _call: BetNativeCall;

  constructor(call: BetNativeCall) {
    this._call = call;
  }

  get conditionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get outcomeId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get minOdds(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class BetNativeCall__Outputs {
  _call: BetNativeCall;

  constructor(call: BetNativeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ChangeAzuroBetCall extends ethereum.Call {
  get inputs(): ChangeAzuroBetCall__Inputs {
    return new ChangeAzuroBetCall__Inputs(this);
  }

  get outputs(): ChangeAzuroBetCall__Outputs {
    return new ChangeAzuroBetCall__Outputs(this);
  }
}

export class ChangeAzuroBetCall__Inputs {
  _call: ChangeAzuroBetCall;

  constructor(call: ChangeAzuroBetCall) {
    this._call = call;
  }

  get newAzuroBet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeAzuroBetCall__Outputs {
  _call: ChangeAzuroBetCall;

  constructor(call: ChangeAzuroBetCall) {
    this._call = call;
  }
}

export class ChangeClaimTimeoutCall extends ethereum.Call {
  get inputs(): ChangeClaimTimeoutCall__Inputs {
    return new ChangeClaimTimeoutCall__Inputs(this);
  }

  get outputs(): ChangeClaimTimeoutCall__Outputs {
    return new ChangeClaimTimeoutCall__Outputs(this);
  }
}

export class ChangeClaimTimeoutCall__Inputs {
  _call: ChangeClaimTimeoutCall;

  constructor(call: ChangeClaimTimeoutCall) {
    this._call = call;
  }

  get newClaimTimeout(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeClaimTimeoutCall__Outputs {
  _call: ChangeClaimTimeoutCall;

  constructor(call: ChangeClaimTimeoutCall) {
    this._call = call;
  }
}

export class ChangeCoreCall extends ethereum.Call {
  get inputs(): ChangeCoreCall__Inputs {
    return new ChangeCoreCall__Inputs(this);
  }

  get outputs(): ChangeCoreCall__Outputs {
    return new ChangeCoreCall__Outputs(this);
  }
}

export class ChangeCoreCall__Inputs {
  _call: ChangeCoreCall;

  constructor(call: ChangeCoreCall) {
    this._call = call;
  }

  get newCore(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeCoreCall__Outputs {
  _call: ChangeCoreCall;

  constructor(call: ChangeCoreCall) {
    this._call = call;
  }
}

export class ChangeDaoRewardCall extends ethereum.Call {
  get inputs(): ChangeDaoRewardCall__Inputs {
    return new ChangeDaoRewardCall__Inputs(this);
  }

  get outputs(): ChangeDaoRewardCall__Outputs {
    return new ChangeDaoRewardCall__Outputs(this);
  }
}

export class ChangeDaoRewardCall__Inputs {
  _call: ChangeDaoRewardCall;

  constructor(call: ChangeDaoRewardCall) {
    this._call = call;
  }

  get newDaoFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeDaoRewardCall__Outputs {
  _call: ChangeDaoRewardCall;

  constructor(call: ChangeDaoRewardCall) {
    this._call = call;
  }
}

export class ChangeMinDepoCall extends ethereum.Call {
  get inputs(): ChangeMinDepoCall__Inputs {
    return new ChangeMinDepoCall__Inputs(this);
  }

  get outputs(): ChangeMinDepoCall__Outputs {
    return new ChangeMinDepoCall__Outputs(this);
  }
}

export class ChangeMinDepoCall__Inputs {
  _call: ChangeMinDepoCall;

  constructor(call: ChangeMinDepoCall) {
    this._call = call;
  }

  get newMinDepo(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeMinDepoCall__Outputs {
  _call: ChangeMinDepoCall;

  constructor(call: ChangeMinDepoCall) {
    this._call = call;
  }
}

export class ChangeOracleRewardCall extends ethereum.Call {
  get inputs(): ChangeOracleRewardCall__Inputs {
    return new ChangeOracleRewardCall__Inputs(this);
  }

  get outputs(): ChangeOracleRewardCall__Outputs {
    return new ChangeOracleRewardCall__Outputs(this);
  }
}

export class ChangeOracleRewardCall__Inputs {
  _call: ChangeOracleRewardCall;

  constructor(call: ChangeOracleRewardCall) {
    this._call = call;
  }

  get newOracleFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeOracleRewardCall__Outputs {
  _call: ChangeOracleRewardCall;

  constructor(call: ChangeOracleRewardCall) {
    this._call = call;
  }
}

export class ChangeReinforcementAbilityCall extends ethereum.Call {
  get inputs(): ChangeReinforcementAbilityCall__Inputs {
    return new ChangeReinforcementAbilityCall__Inputs(this);
  }

  get outputs(): ChangeReinforcementAbilityCall__Outputs {
    return new ChangeReinforcementAbilityCall__Outputs(this);
  }
}

export class ChangeReinforcementAbilityCall__Inputs {
  _call: ChangeReinforcementAbilityCall;

  constructor(call: ChangeReinforcementAbilityCall) {
    this._call = call;
  }

  get newReinforcementAbility(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeReinforcementAbilityCall__Outputs {
  _call: ChangeReinforcementAbilityCall;

  constructor(call: ChangeReinforcementAbilityCall) {
    this._call = call;
  }
}

export class ChangeWithdrawTimeoutCall extends ethereum.Call {
  get inputs(): ChangeWithdrawTimeoutCall__Inputs {
    return new ChangeWithdrawTimeoutCall__Inputs(this);
  }

  get outputs(): ChangeWithdrawTimeoutCall__Outputs {
    return new ChangeWithdrawTimeoutCall__Outputs(this);
  }
}

export class ChangeWithdrawTimeoutCall__Inputs {
  _call: ChangeWithdrawTimeoutCall;

  constructor(call: ChangeWithdrawTimeoutCall) {
    this._call = call;
  }

  get newWithdrawTimeout(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeWithdrawTimeoutCall__Outputs {
  _call: ChangeWithdrawTimeoutCall;

  constructor(call: ChangeWithdrawTimeoutCall) {
    this._call = call;
  }
}

export class ClaimDaoRewardCall extends ethereum.Call {
  get inputs(): ClaimDaoRewardCall__Inputs {
    return new ClaimDaoRewardCall__Inputs(this);
  }

  get outputs(): ClaimDaoRewardCall__Outputs {
    return new ClaimDaoRewardCall__Outputs(this);
  }
}

export class ClaimDaoRewardCall__Inputs {
  _call: ClaimDaoRewardCall;

  constructor(call: ClaimDaoRewardCall) {
    this._call = call;
  }
}

export class ClaimDaoRewardCall__Outputs {
  _call: ClaimDaoRewardCall;

  constructor(call: ClaimDaoRewardCall) {
    this._call = call;
  }
}

export class ClaimOracleRewardCall extends ethereum.Call {
  get inputs(): ClaimOracleRewardCall__Inputs {
    return new ClaimOracleRewardCall__Inputs(this);
  }

  get outputs(): ClaimOracleRewardCall__Outputs {
    return new ClaimOracleRewardCall__Outputs(this);
  }
}

export class ClaimOracleRewardCall__Inputs {
  _call: ClaimOracleRewardCall;

  constructor(call: ClaimOracleRewardCall) {
    this._call = call;
  }

  get oracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClaimOracleRewardCall__Outputs {
  _call: ClaimOracleRewardCall;

  constructor(call: ClaimOracleRewardCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get token_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get azuroBetAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class LockReserveCall extends ethereum.Call {
  get inputs(): LockReserveCall__Inputs {
    return new LockReserveCall__Inputs(this);
  }

  get outputs(): LockReserveCall__Outputs {
    return new LockReserveCall__Outputs(this);
  }
}

export class LockReserveCall__Inputs {
  _call: LockReserveCall;

  constructor(call: LockReserveCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LockReserveCall__Outputs {
  _call: LockReserveCall;

  constructor(call: LockReserveCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawLiquidityCall extends ethereum.Call {
  get inputs(): WithdrawLiquidityCall__Inputs {
    return new WithdrawLiquidityCall__Inputs(this);
  }

  get outputs(): WithdrawLiquidityCall__Outputs {
    return new WithdrawLiquidityCall__Outputs(this);
  }
}

export class WithdrawLiquidityCall__Inputs {
  _call: WithdrawLiquidityCall;

  constructor(call: WithdrawLiquidityCall) {
    this._call = call;
  }

  get depNum(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get percent(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawLiquidityCall__Outputs {
  _call: WithdrawLiquidityCall;

  constructor(call: WithdrawLiquidityCall) {
    this._call = call;
  }
}

export class WithdrawLiquidityNativeCall extends ethereum.Call {
  get inputs(): WithdrawLiquidityNativeCall__Inputs {
    return new WithdrawLiquidityNativeCall__Inputs(this);
  }

  get outputs(): WithdrawLiquidityNativeCall__Outputs {
    return new WithdrawLiquidityNativeCall__Outputs(this);
  }
}

export class WithdrawLiquidityNativeCall__Inputs {
  _call: WithdrawLiquidityNativeCall;

  constructor(call: WithdrawLiquidityNativeCall) {
    this._call = call;
  }

  get depNum(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get percent(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawLiquidityNativeCall__Outputs {
  _call: WithdrawLiquidityNativeCall;

  constructor(call: WithdrawLiquidityNativeCall) {
    this._call = call;
  }
}

export class WithdrawPayoutCall extends ethereum.Call {
  get inputs(): WithdrawPayoutCall__Inputs {
    return new WithdrawPayoutCall__Inputs(this);
  }

  get outputs(): WithdrawPayoutCall__Outputs {
    return new WithdrawPayoutCall__Outputs(this);
  }
}

export class WithdrawPayoutCall__Inputs {
  _call: WithdrawPayoutCall;

  constructor(call: WithdrawPayoutCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawPayoutCall__Outputs {
  _call: WithdrawPayoutCall;

  constructor(call: WithdrawPayoutCall) {
    this._call = call;
  }
}

export class WithdrawPayoutNativeCall extends ethereum.Call {
  get inputs(): WithdrawPayoutNativeCall__Inputs {
    return new WithdrawPayoutNativeCall__Inputs(this);
  }

  get outputs(): WithdrawPayoutNativeCall__Outputs {
    return new WithdrawPayoutNativeCall__Outputs(this);
  }
}

export class WithdrawPayoutNativeCall__Inputs {
  _call: WithdrawPayoutNativeCall;

  constructor(call: WithdrawPayoutNativeCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawPayoutNativeCall__Outputs {
  _call: WithdrawPayoutNativeCall;

  constructor(call: WithdrawPayoutNativeCall) {
    this._call = call;
  }
}
