// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AllConditionsStopped extends ethereum.Event {
  get params(): AllConditionsStopped__Params {
    return new AllConditionsStopped__Params(this);
  }
}

export class AllConditionsStopped__Params {
  _event: AllConditionsStopped;

  constructor(event: AllConditionsStopped) {
    this._event = event;
  }

  get flag(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class ConditionCreated extends ethereum.Event {
  get params(): ConditionCreated__Params {
    return new ConditionCreated__Params(this);
  }
}

export class ConditionCreated__Params {
  _event: ConditionCreated;

  constructor(event: ConditionCreated) {
    this._event = event;
  }

  get oracleConditionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get conditionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ConditionResolved extends ethereum.Event {
  get params(): ConditionResolved__Params {
    return new ConditionResolved__Params(this);
  }
}

export class ConditionResolved__Params {
  _event: ConditionResolved;

  constructor(event: ConditionResolved) {
    this._event = event;
  }

  get oracleConditionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get conditionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get outcomeWin(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get state(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get amountForLp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class ConditionShifted extends ethereum.Event {
  get params(): ConditionShifted__Params {
    return new ConditionShifted__Params(this);
  }
}

export class ConditionShifted__Params {
  _event: ConditionShifted;

  constructor(event: ConditionShifted) {
    this._event = event;
  }

  get oracleCondId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get conditionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newTimestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ConditionStopped extends ethereum.Event {
  get params(): ConditionStopped__Params {
    return new ConditionStopped__Params(this);
  }
}

export class ConditionStopped__Params {
  _event: ConditionStopped;

  constructor(event: ConditionStopped) {
    this._event = event;
  }

  get conditionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get flag(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class LpChanged extends ethereum.Event {
  get params(): LpChanged__Params {
    return new LpChanged__Params(this);
  }
}

export class LpChanged__Params {
  _event: LpChanged;

  constructor(event: LpChanged) {
    this._event = event;
  }

  get newLp(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class MaintainerUpdated extends ethereum.Event {
  get params(): MaintainerUpdated__Params {
    return new MaintainerUpdated__Params(this);
  }
}

export class MaintainerUpdated__Params {
  _event: MaintainerUpdated;

  constructor(event: MaintainerUpdated) {
    this._event = event;
  }

  get maintainer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get active(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class MaxBanksRatioChanged extends ethereum.Event {
  get params(): MaxBanksRatioChanged__Params {
    return new MaxBanksRatioChanged__Params(this);
  }
}

export class MaxBanksRatioChanged__Params {
  _event: MaxBanksRatioChanged;

  constructor(event: MaxBanksRatioChanged) {
    this._event = event;
  }

  get newRatio(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OracleAdded extends ethereum.Event {
  get params(): OracleAdded__Params {
    return new OracleAdded__Params(this);
  }
}

export class OracleAdded__Params {
  _event: OracleAdded;

  constructor(event: OracleAdded) {
    this._event = event;
  }

  get newOracle(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OracleRenounced extends ethereum.Event {
  get params(): OracleRenounced__Params {
    return new OracleRenounced__Params(this);
  }
}

export class OracleRenounced__Params {
  _event: OracleRenounced;

  constructor(event: OracleRenounced) {
    this._event = event;
  }

  get oracle(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class core__betsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    return map;
  }

  getConditionId(): BigInt {
    return this.value0;
  }

  getAmount(): BigInt {
    return this.value1;
  }

  getOutcome(): BigInt {
    return this.value2;
  }

  getCreatedAt(): BigInt {
    return this.value3;
  }

  getOdds(): BigInt {
    return this.value4;
  }

  getPayed(): boolean {
    return this.value5;
  }
}

export class core__conditionsResult {
  value0: BigInt;
  value1: BigInt;
  value2: Bytes;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: i32;
  value7: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: Bytes,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: i32,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromFixedBytes(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set(
      "value6",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value6))
    );
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }

  getReinforcement(): BigInt {
    return this.value0;
  }

  getMargin(): BigInt {
    return this.value1;
  }

  getIpfsHash(): Bytes {
    return this.value2;
  }

  getScopeId(): BigInt {
    return this.value3;
  }

  getOutcomeWin(): BigInt {
    return this.value4;
  }

  getTimestamp(): BigInt {
    return this.value5;
  }

  getState(): i32 {
    return this.value6;
  }

  getLeaf(): BigInt {
    return this.value7;
  }
}

export class core__getBetInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getAmount(): BigInt {
    return this.value0;
  }

  getOdds(): BigInt {
    return this.value1;
  }

  getCreatedAt(): BigInt {
    return this.value2;
  }
}

export class core__getConditionResultValue0Struct extends ethereum.Tuple {
  get fundBank(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get payouts(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get totalNetBets(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get reinforcement(): BigInt {
    return this[3].toBigInt();
  }

  get margin(): BigInt {
    return this[4].toBigInt();
  }

  get ipfsHash(): Bytes {
    return this[5].toBytes();
  }

  get outcomes(): Array<BigInt> {
    return this[6].toBigIntArray();
  }

  get scopeId(): BigInt {
    return this[7].toBigInt();
  }

  get outcomeWin(): BigInt {
    return this[8].toBigInt();
  }

  get timestamp(): BigInt {
    return this[9].toBigInt();
  }

  get state(): i32 {
    return this[10].toI32();
  }

  get leaf(): BigInt {
    return this[11].toBigInt();
  }
}

export class core__putBetResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }
}

export class core__resolvePayoutResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getSuccess(): boolean {
    return this.value0;
  }

  getAmount(): BigInt {
    return this.value1;
  }
}

export class core__viewPayoutResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getSuccess(): boolean {
    return this.value0;
  }

  getAmount(): BigInt {
    return this.value1;
  }
}

export class core extends ethereum.SmartContract {
  static bind(address: Address): core {
    return new core("core", address);
  }

  LP(): Address {
    let result = super.call("LP", "LP():(address)", []);

    return result[0].toAddress();
  }

  try_LP(): ethereum.CallResult<Address> {
    let result = super.tryCall("LP", "LP():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  activeConditions(): BigInt {
    let result = super.call(
      "activeConditions",
      "activeConditions():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_activeConditions(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "activeConditions",
      "activeConditions():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allConditionsStopped(): boolean {
    let result = super.call(
      "allConditionsStopped",
      "allConditionsStopped():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_allConditionsStopped(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "allConditionsStopped",
      "allConditionsStopped():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  bets(param0: BigInt): core__betsResult {
    let result = super.call(
      "bets",
      "bets(uint256):(uint256,uint128,uint64,uint64,uint64,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new core__betsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBoolean()
    );
  }

  try_bets(param0: BigInt): ethereum.CallResult<core__betsResult> {
    let result = super.tryCall(
      "bets",
      "bets(uint256):(uint256,uint128,uint64,uint64,uint64,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new core__betsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBoolean()
      )
    );
  }

  calculateOdds(conditionId: BigInt, amount: BigInt, outcome: BigInt): BigInt {
    let result = super.call(
      "calculateOdds",
      "calculateOdds(uint256,uint128,uint64):(uint64)",
      [
        ethereum.Value.fromUnsignedBigInt(conditionId),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(outcome)
      ]
    );

    return result[0].toBigInt();
  }

  try_calculateOdds(
    conditionId: BigInt,
    amount: BigInt,
    outcome: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateOdds",
      "calculateOdds(uint256,uint128,uint64):(uint64)",
      [
        ethereum.Value.fromUnsignedBigInt(conditionId),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(outcome)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ceil(a: BigInt, m: BigInt): BigInt {
    let result = super.call("ceil", "ceil(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(a),
      ethereum.Value.fromUnsignedBigInt(m)
    ]);

    return result[0].toBigInt();
  }

  try_ceil(a: BigInt, m: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ceil", "ceil(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(a),
      ethereum.Value.fromUnsignedBigInt(m)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  conditions(param0: BigInt): core__conditionsResult {
    let result = super.call(
      "conditions",
      "conditions(uint256):(uint128,uint128,bytes32,uint128,uint64,uint64,uint8,uint48)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new core__conditionsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBytes(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toI32(),
      result[7].toBigInt()
    );
  }

  try_conditions(param0: BigInt): ethereum.CallResult<core__conditionsResult> {
    let result = super.tryCall(
      "conditions",
      "conditions(uint256):(uint128,uint128,bytes32,uint128,uint64,uint64,uint8,uint48)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new core__conditionsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBytes(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toI32(),
        value[7].toBigInt()
      )
    );
  }

  defaultMargin(): BigInt {
    let result = super.call("defaultMargin", "defaultMargin():(uint128)", []);

    return result[0].toBigInt();
  }

  try_defaultMargin(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "defaultMargin",
      "defaultMargin():(uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  defaultReinforcement(): BigInt {
    let result = super.call(
      "defaultReinforcement",
      "defaultReinforcement():(uint128)",
      []
    );

    return result[0].toBigInt();
  }

  try_defaultReinforcement(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "defaultReinforcement",
      "defaultReinforcement():(uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBetInfo(betId: BigInt): core__getBetInfoResult {
    let result = super.call(
      "getBetInfo",
      "getBetInfo(uint256):(uint128,uint64,uint64)",
      [ethereum.Value.fromUnsignedBigInt(betId)]
    );

    return new core__getBetInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getBetInfo(betId: BigInt): ethereum.CallResult<core__getBetInfoResult> {
    let result = super.tryCall(
      "getBetInfo",
      "getBetInfo(uint256):(uint128,uint64,uint64)",
      [ethereum.Value.fromUnsignedBigInt(betId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new core__getBetInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getCondition(conditionId: BigInt): core__getConditionResultValue0Struct {
    let result = super.call(
      "getCondition",
      "getCondition(uint256):((uint128[2],uint128[2],uint128[2],uint128,uint128,bytes32,uint64[2],uint128,uint64,uint64,uint8,uint48))",
      [ethereum.Value.fromUnsignedBigInt(conditionId)]
    );

    return changetype<core__getConditionResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getCondition(
    conditionId: BigInt
  ): ethereum.CallResult<core__getConditionResultValue0Struct> {
    let result = super.tryCall(
      "getCondition",
      "getCondition(uint256):((uint128[2],uint128[2],uint128[2],uint128,uint128,bytes32,uint64[2],uint128,uint64,uint64,uint8,uint48))",
      [ethereum.Value.fromUnsignedBigInt(conditionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<core__getConditionResultValue0Struct>(value[0].toTuple())
    );
  }

  getConditionFunds(conditionId: BigInt): Array<BigInt> {
    let result = super.call(
      "getConditionFunds",
      "getConditionFunds(uint256):(uint128[2])",
      [ethereum.Value.fromUnsignedBigInt(conditionId)]
    );

    return result[0].toBigIntArray();
  }

  try_getConditionFunds(
    conditionId: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getConditionFunds",
      "getConditionFunds(uint256):(uint128[2])",
      [ethereum.Value.fromUnsignedBigInt(conditionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getConditionReinforcement(conditionId: BigInt): BigInt {
    let result = super.call(
      "getConditionReinforcement",
      "getConditionReinforcement(uint256):(uint128)",
      [ethereum.Value.fromUnsignedBigInt(conditionId)]
    );

    return result[0].toBigInt();
  }

  try_getConditionReinforcement(
    conditionId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getConditionReinforcement",
      "getConditionReinforcement(uint256):(uint128)",
      [ethereum.Value.fromUnsignedBigInt(conditionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMargin(outcomeId: BigInt): BigInt {
    let result = super.call("getMargin", "getMargin(uint64):(uint128)", [
      ethereum.Value.fromUnsignedBigInt(outcomeId)
    ]);

    return result[0].toBigInt();
  }

  try_getMargin(outcomeId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getMargin", "getMargin(uint64):(uint128)", [
      ethereum.Value.fromUnsignedBigInt(outcomeId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOddsFromBanks(
    fund1Bank: BigInt,
    fund2Bank: BigInt,
    amount: BigInt,
    outcomeIndex: BigInt,
    margin: BigInt,
    multiplier: BigInt
  ): BigInt {
    let result = super.call(
      "getOddsFromBanks",
      "getOddsFromBanks(uint256,uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(fund1Bank),
        ethereum.Value.fromUnsignedBigInt(fund2Bank),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(outcomeIndex),
        ethereum.Value.fromUnsignedBigInt(margin),
        ethereum.Value.fromUnsignedBigInt(multiplier)
      ]
    );

    return result[0].toBigInt();
  }

  try_getOddsFromBanks(
    fund1Bank: BigInt,
    fund2Bank: BigInt,
    amount: BigInt,
    outcomeIndex: BigInt,
    margin: BigInt,
    multiplier: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOddsFromBanks",
      "getOddsFromBanks(uint256,uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(fund1Bank),
        ethereum.Value.fromUnsignedBigInt(fund2Bank),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(outcomeIndex),
        ethereum.Value.fromUnsignedBigInt(margin),
        ethereum.Value.fromUnsignedBigInt(multiplier)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReinforcement(outcomeId: BigInt): BigInt {
    let result = super.call(
      "getReinforcement",
      "getReinforcement(uint64):(uint128)",
      [ethereum.Value.fromUnsignedBigInt(outcomeId)]
    );

    return result[0].toBigInt();
  }

  try_getReinforcement(outcomeId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReinforcement",
      "getReinforcement(uint64):(uint128)",
      [ethereum.Value.fromUnsignedBigInt(outcomeId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isOracle(oracle: Address): boolean {
    let result = super.call("isOracle", "isOracle(address):(bool)", [
      ethereum.Value.fromAddress(oracle)
    ]);

    return result[0].toBoolean();
  }

  try_isOracle(oracle: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOracle", "isOracle(address):(bool)", [
      ethereum.Value.fromAddress(oracle)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOutComeCorrect(conditionId: BigInt, outcome: BigInt): boolean {
    let result = super.call(
      "isOutComeCorrect",
      "isOutComeCorrect(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(conditionId),
        ethereum.Value.fromUnsignedBigInt(outcome)
      ]
    );

    return result[0].toBoolean();
  }

  try_isOutComeCorrect(
    conditionId: BigInt,
    outcome: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isOutComeCorrect",
      "isOutComeCorrect(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(conditionId),
        ethereum.Value.fromUnsignedBigInt(outcome)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastConditionId(): BigInt {
    let result = super.call(
      "lastConditionId",
      "lastConditionId():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastConditionId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastConditionId",
      "lastConditionId():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maintainers(param0: Address): boolean {
    let result = super.call("maintainers", "maintainers(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_maintainers(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("maintainers", "maintainers(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  marginAdjustedOdds(
    odds: BigInt,
    marginality: BigInt,
    multiplier: BigInt
  ): BigInt {
    let result = super.call(
      "marginAdjustedOdds",
      "marginAdjustedOdds(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(odds),
        ethereum.Value.fromUnsignedBigInt(marginality),
        ethereum.Value.fromUnsignedBigInt(multiplier)
      ]
    );

    return result[0].toBigInt();
  }

  try_marginAdjustedOdds(
    odds: BigInt,
    marginality: BigInt,
    multiplier: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "marginAdjustedOdds",
      "marginAdjustedOdds(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(odds),
        ethereum.Value.fromUnsignedBigInt(marginality),
        ethereum.Value.fromUnsignedBigInt(multiplier)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxBanksRatio(): BigInt {
    let result = super.call("maxBanksRatio", "maxBanksRatio():(uint64)", []);

    return result[0].toBigInt();
  }

  try_maxBanksRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxBanksRatio", "maxBanksRatio():(uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  multiplier(): BigInt {
    let result = super.call("multiplier", "multiplier():(uint128)", []);

    return result[0].toBigInt();
  }

  try_multiplier(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("multiplier", "multiplier():(uint128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  oracleConditionIds(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "oracleConditionIds",
      "oracleConditionIds(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_oracleConditionIds(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "oracleConditionIds",
      "oracleConditionIds(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  oracles(param0: Address): boolean {
    let result = super.call("oracles", "oracles(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_oracles(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("oracles", "oracles(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  putBet(
    conditionId: BigInt,
    tokenId: BigInt,
    amount: BigInt,
    outcome: BigInt,
    minOdds: BigInt
  ): core__putBetResult {
    let result = super.call(
      "putBet",
      "putBet(uint256,uint256,uint128,uint64,uint64):(uint64,uint128,uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(conditionId),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(outcome),
        ethereum.Value.fromUnsignedBigInt(minOdds)
      ]
    );

    return new core__putBetResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_putBet(
    conditionId: BigInt,
    tokenId: BigInt,
    amount: BigInt,
    outcome: BigInt,
    minOdds: BigInt
  ): ethereum.CallResult<core__putBetResult> {
    let result = super.tryCall(
      "putBet",
      "putBet(uint256,uint256,uint128,uint64,uint64):(uint64,uint128,uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(conditionId),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(outcome),
        ethereum.Value.fromUnsignedBigInt(minOdds)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new core__putBetResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  resolvePayout(tokenId: BigInt): core__resolvePayoutResult {
    let result = super.call(
      "resolvePayout",
      "resolvePayout(uint256):(bool,uint128)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return new core__resolvePayoutResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_resolvePayout(
    tokenId: BigInt
  ): ethereum.CallResult<core__resolvePayoutResult> {
    let result = super.tryCall(
      "resolvePayout",
      "resolvePayout(uint256):(bool,uint128)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new core__resolvePayoutResult(value[0].toBoolean(), value[1].toBigInt())
    );
  }

  sqrt(x: BigInt): BigInt {
    let result = super.call("sqrt", "sqrt(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(x)
    ]);

    return result[0].toBigInt();
  }

  try_sqrt(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("sqrt", "sqrt(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(x)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  viewPayout(tokenId: BigInt): core__viewPayoutResult {
    let result = super.call(
      "viewPayout",
      "viewPayout(uint256):(bool,uint128)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return new core__viewPayoutResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_viewPayout(tokenId: BigInt): ethereum.CallResult<core__viewPayoutResult> {
    let result = super.tryCall(
      "viewPayout",
      "viewPayout(uint256):(bool,uint128)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new core__viewPayoutResult(value[0].toBoolean(), value[1].toBigInt())
    );
  }
}

export class AddMaintainerCall extends ethereum.Call {
  get inputs(): AddMaintainerCall__Inputs {
    return new AddMaintainerCall__Inputs(this);
  }

  get outputs(): AddMaintainerCall__Outputs {
    return new AddMaintainerCall__Outputs(this);
  }
}

export class AddMaintainerCall__Inputs {
  _call: AddMaintainerCall;

  constructor(call: AddMaintainerCall) {
    this._call = call;
  }

  get maintainer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get active(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class AddMaintainerCall__Outputs {
  _call: AddMaintainerCall;

  constructor(call: AddMaintainerCall) {
    this._call = call;
  }
}

export class CancelByMaintainerCall extends ethereum.Call {
  get inputs(): CancelByMaintainerCall__Inputs {
    return new CancelByMaintainerCall__Inputs(this);
  }

  get outputs(): CancelByMaintainerCall__Outputs {
    return new CancelByMaintainerCall__Outputs(this);
  }
}

export class CancelByMaintainerCall__Inputs {
  _call: CancelByMaintainerCall;

  constructor(call: CancelByMaintainerCall) {
    this._call = call;
  }

  get conditionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelByMaintainerCall__Outputs {
  _call: CancelByMaintainerCall;

  constructor(call: CancelByMaintainerCall) {
    this._call = call;
  }
}

export class CancelByOracleCall extends ethereum.Call {
  get inputs(): CancelByOracleCall__Inputs {
    return new CancelByOracleCall__Inputs(this);
  }

  get outputs(): CancelByOracleCall__Outputs {
    return new CancelByOracleCall__Outputs(this);
  }
}

export class CancelByOracleCall__Inputs {
  _call: CancelByOracleCall;

  constructor(call: CancelByOracleCall) {
    this._call = call;
  }

  get oracleCondId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelByOracleCall__Outputs {
  _call: CancelByOracleCall;

  constructor(call: CancelByOracleCall) {
    this._call = call;
  }
}

export class ChangeDefaultMarginCall extends ethereum.Call {
  get inputs(): ChangeDefaultMarginCall__Inputs {
    return new ChangeDefaultMarginCall__Inputs(this);
  }

  get outputs(): ChangeDefaultMarginCall__Outputs {
    return new ChangeDefaultMarginCall__Outputs(this);
  }
}

export class ChangeDefaultMarginCall__Inputs {
  _call: ChangeDefaultMarginCall;

  constructor(call: ChangeDefaultMarginCall) {
    this._call = call;
  }

  get margin(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeDefaultMarginCall__Outputs {
  _call: ChangeDefaultMarginCall;

  constructor(call: ChangeDefaultMarginCall) {
    this._call = call;
  }
}

export class ChangeDefaultReinforcementCall extends ethereum.Call {
  get inputs(): ChangeDefaultReinforcementCall__Inputs {
    return new ChangeDefaultReinforcementCall__Inputs(this);
  }

  get outputs(): ChangeDefaultReinforcementCall__Outputs {
    return new ChangeDefaultReinforcementCall__Outputs(this);
  }
}

export class ChangeDefaultReinforcementCall__Inputs {
  _call: ChangeDefaultReinforcementCall;

  constructor(call: ChangeDefaultReinforcementCall) {
    this._call = call;
  }

  get reinforcement(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeDefaultReinforcementCall__Outputs {
  _call: ChangeDefaultReinforcementCall;

  constructor(call: ChangeDefaultReinforcementCall) {
    this._call = call;
  }
}

export class ChangeMaxBanksRatioCall extends ethereum.Call {
  get inputs(): ChangeMaxBanksRatioCall__Inputs {
    return new ChangeMaxBanksRatioCall__Inputs(this);
  }

  get outputs(): ChangeMaxBanksRatioCall__Outputs {
    return new ChangeMaxBanksRatioCall__Outputs(this);
  }
}

export class ChangeMaxBanksRatioCall__Inputs {
  _call: ChangeMaxBanksRatioCall;

  constructor(call: ChangeMaxBanksRatioCall) {
    this._call = call;
  }

  get newRatio(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeMaxBanksRatioCall__Outputs {
  _call: ChangeMaxBanksRatioCall;

  constructor(call: ChangeMaxBanksRatioCall) {
    this._call = call;
  }
}

export class ClaimOracleRewardCall extends ethereum.Call {
  get inputs(): ClaimOracleRewardCall__Inputs {
    return new ClaimOracleRewardCall__Inputs(this);
  }

  get outputs(): ClaimOracleRewardCall__Outputs {
    return new ClaimOracleRewardCall__Outputs(this);
  }
}

export class ClaimOracleRewardCall__Inputs {
  _call: ClaimOracleRewardCall;

  constructor(call: ClaimOracleRewardCall) {
    this._call = call;
  }
}

export class ClaimOracleRewardCall__Outputs {
  _call: ClaimOracleRewardCall;

  constructor(call: ClaimOracleRewardCall) {
    this._call = call;
  }
}

export class CreateConditionCall extends ethereum.Call {
  get inputs(): CreateConditionCall__Inputs {
    return new CreateConditionCall__Inputs(this);
  }

  get outputs(): CreateConditionCall__Outputs {
    return new CreateConditionCall__Outputs(this);
  }
}

export class CreateConditionCall__Inputs {
  _call: CreateConditionCall;

  constructor(call: CreateConditionCall) {
    this._call = call;
  }

  get oracleCondId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get scopeId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get odds(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get outcomes(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get timestamp(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get ipfsHash(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class CreateConditionCall__Outputs {
  _call: CreateConditionCall;

  constructor(call: CreateConditionCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get reinforcement(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get oracle(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get margin(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class PutBetCall extends ethereum.Call {
  get inputs(): PutBetCall__Inputs {
    return new PutBetCall__Inputs(this);
  }

  get outputs(): PutBetCall__Outputs {
    return new PutBetCall__Outputs(this);
  }
}

export class PutBetCall__Inputs {
  _call: PutBetCall;

  constructor(call: PutBetCall) {
    this._call = call;
  }

  get conditionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get outcome(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get minOdds(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class PutBetCall__Outputs {
  _call: PutBetCall;

  constructor(call: PutBetCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get value2(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class RenounceOracleCall extends ethereum.Call {
  get inputs(): RenounceOracleCall__Inputs {
    return new RenounceOracleCall__Inputs(this);
  }

  get outputs(): RenounceOracleCall__Outputs {
    return new RenounceOracleCall__Outputs(this);
  }
}

export class RenounceOracleCall__Inputs {
  _call: RenounceOracleCall;

  constructor(call: RenounceOracleCall) {
    this._call = call;
  }

  get oracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RenounceOracleCall__Outputs {
  _call: RenounceOracleCall;

  constructor(call: RenounceOracleCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class ResolveConditionCall extends ethereum.Call {
  get inputs(): ResolveConditionCall__Inputs {
    return new ResolveConditionCall__Inputs(this);
  }

  get outputs(): ResolveConditionCall__Outputs {
    return new ResolveConditionCall__Outputs(this);
  }
}

export class ResolveConditionCall__Inputs {
  _call: ResolveConditionCall;

  constructor(call: ResolveConditionCall) {
    this._call = call;
  }

  get oracleCondId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get outcomeWin(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ResolveConditionCall__Outputs {
  _call: ResolveConditionCall;

  constructor(call: ResolveConditionCall) {
    this._call = call;
  }
}

export class ResolvePayoutCall extends ethereum.Call {
  get inputs(): ResolvePayoutCall__Inputs {
    return new ResolvePayoutCall__Inputs(this);
  }

  get outputs(): ResolvePayoutCall__Outputs {
    return new ResolvePayoutCall__Outputs(this);
  }
}

export class ResolvePayoutCall__Inputs {
  _call: ResolvePayoutCall;

  constructor(call: ResolvePayoutCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ResolvePayoutCall__Outputs {
  _call: ResolvePayoutCall;

  constructor(call: ResolvePayoutCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }

  get amount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SetLpCall extends ethereum.Call {
  get inputs(): SetLpCall__Inputs {
    return new SetLpCall__Inputs(this);
  }

  get outputs(): SetLpCall__Outputs {
    return new SetLpCall__Outputs(this);
  }
}

export class SetLpCall__Inputs {
  _call: SetLpCall;

  constructor(call: SetLpCall) {
    this._call = call;
  }

  get lp(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetLpCall__Outputs {
  _call: SetLpCall;

  constructor(call: SetLpCall) {
    this._call = call;
  }
}

export class SetOracleCall extends ethereum.Call {
  get inputs(): SetOracleCall__Inputs {
    return new SetOracleCall__Inputs(this);
  }

  get outputs(): SetOracleCall__Outputs {
    return new SetOracleCall__Outputs(this);
  }
}

export class SetOracleCall__Inputs {
  _call: SetOracleCall;

  constructor(call: SetOracleCall) {
    this._call = call;
  }

  get oracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOracleCall__Outputs {
  _call: SetOracleCall;

  constructor(call: SetOracleCall) {
    this._call = call;
  }
}

export class ShiftCall extends ethereum.Call {
  get inputs(): ShiftCall__Inputs {
    return new ShiftCall__Inputs(this);
  }

  get outputs(): ShiftCall__Outputs {
    return new ShiftCall__Outputs(this);
  }
}

export class ShiftCall__Inputs {
  _call: ShiftCall;

  constructor(call: ShiftCall) {
    this._call = call;
  }

  get oracleCondId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newTimestamp(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ShiftCall__Outputs {
  _call: ShiftCall;

  constructor(call: ShiftCall) {
    this._call = call;
  }
}

export class StopAllConditionsCall extends ethereum.Call {
  get inputs(): StopAllConditionsCall__Inputs {
    return new StopAllConditionsCall__Inputs(this);
  }

  get outputs(): StopAllConditionsCall__Outputs {
    return new StopAllConditionsCall__Outputs(this);
  }
}

export class StopAllConditionsCall__Inputs {
  _call: StopAllConditionsCall;

  constructor(call: StopAllConditionsCall) {
    this._call = call;
  }

  get flag(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class StopAllConditionsCall__Outputs {
  _call: StopAllConditionsCall;

  constructor(call: StopAllConditionsCall) {
    this._call = call;
  }
}

export class StopConditionCall extends ethereum.Call {
  get inputs(): StopConditionCall__Inputs {
    return new StopConditionCall__Inputs(this);
  }

  get outputs(): StopConditionCall__Outputs {
    return new StopConditionCall__Outputs(this);
  }
}

export class StopConditionCall__Inputs {
  _call: StopConditionCall;

  constructor(call: StopConditionCall) {
    this._call = call;
  }

  get conditionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get flag(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class StopConditionCall__Outputs {
  _call: StopConditionCall;

  constructor(call: StopConditionCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateMarginsCall extends ethereum.Call {
  get inputs(): UpdateMarginsCall__Inputs {
    return new UpdateMarginsCall__Inputs(this);
  }

  get outputs(): UpdateMarginsCall__Outputs {
    return new UpdateMarginsCall__Outputs(this);
  }
}

export class UpdateMarginsCall__Inputs {
  _call: UpdateMarginsCall;

  constructor(call: UpdateMarginsCall) {
    this._call = call;
  }

  get data(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class UpdateMarginsCall__Outputs {
  _call: UpdateMarginsCall;

  constructor(call: UpdateMarginsCall) {
    this._call = call;
  }
}

export class UpdateReinforcementsCall extends ethereum.Call {
  get inputs(): UpdateReinforcementsCall__Inputs {
    return new UpdateReinforcementsCall__Inputs(this);
  }

  get outputs(): UpdateReinforcementsCall__Outputs {
    return new UpdateReinforcementsCall__Outputs(this);
  }
}

export class UpdateReinforcementsCall__Inputs {
  _call: UpdateReinforcementsCall;

  constructor(call: UpdateReinforcementsCall) {
    this._call = call;
  }

  get data(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class UpdateReinforcementsCall__Outputs {
  _call: UpdateReinforcementsCall;

  constructor(call: UpdateReinforcementsCall) {
    this._call = call;
  }
}
