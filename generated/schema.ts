// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ExampleEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ExampleEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ExampleEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ExampleEntity", id.toString(), this);
    }
  }

  static load(id: string): ExampleEntity | null {
    return changetype<ExampleEntity | null>(store.get("ExampleEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get flag(): boolean {
    let value = this.get("flag");
    return value!.toBoolean();
  }

  set flag(value: boolean) {
    this.set("flag", Value.fromBoolean(value));
  }
}

export class Approval extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Approval entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Approval must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Approval", id.toString(), this);
    }
  }

  static load(id: string): Approval | null {
    return changetype<Approval | null>(store.get("Approval", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get approved(): Bytes {
    let value = this.get("approved");
    return value!.toBytes();
  }

  set approved(value: Bytes) {
    this.set("approved", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }
}

export class ApprovalForAll extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ApprovalForAll entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ApprovalForAll must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ApprovalForAll", id.toString(), this);
    }
  }

  static load(id: string): ApprovalForAll | null {
    return changetype<ApprovalForAll | null>(store.get("ApprovalForAll", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get operator(): Bytes {
    let value = this.get("operator");
    return value!.toBytes();
  }

  set operator(value: Bytes) {
    this.set("operator", Value.fromBytes(value));
  }

  get approved(): boolean {
    let value = this.get("approved");
    return value!.toBoolean();
  }

  set approved(value: boolean) {
    this.set("approved", Value.fromBoolean(value));
  }
}

export class AzuroBetChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AzuroBetChanged entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AzuroBetChanged must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AzuroBetChanged", id.toString(), this);
    }
  }

  static load(id: string): AzuroBetChanged | null {
    return changetype<AzuroBetChanged | null>(store.get("AzuroBetChanged", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get newAzuroBet(): Bytes {
    let value = this.get("newAzuroBet");
    return value!.toBytes();
  }

  set newAzuroBet(value: Bytes) {
    this.set("newAzuroBet", Value.fromBytes(value));
  }
}

export class BetterWin extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BetterWin entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BetterWin must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BetterWin", id.toString(), this);
    }
  }

  static load(id: string): BetterWin | null {
    return changetype<BetterWin | null>(store.get("BetterWin", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get better(): Bytes {
    let value = this.get("better");
    return value!.toBytes();
  }

  set better(value: Bytes) {
    this.set("better", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class ClaimTimeoutChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ClaimTimeoutChanged entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ClaimTimeoutChanged must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ClaimTimeoutChanged", id.toString(), this);
    }
  }

  static load(id: string): ClaimTimeoutChanged | null {
    return changetype<ClaimTimeoutChanged | null>(
      store.get("ClaimTimeoutChanged", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get newClaimTimeout(): BigInt {
    let value = this.get("newClaimTimeout");
    return value!.toBigInt();
  }

  set newClaimTimeout(value: BigInt) {
    this.set("newClaimTimeout", Value.fromBigInt(value));
  }
}

export class DaoRewardChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DaoRewardChanged entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DaoRewardChanged must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DaoRewardChanged", id.toString(), this);
    }
  }

  static load(id: string): DaoRewardChanged | null {
    return changetype<DaoRewardChanged | null>(
      store.get("DaoRewardChanged", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get newDaoFee(): BigInt {
    let value = this.get("newDaoFee");
    return value!.toBigInt();
  }

  set newDaoFee(value: BigInt) {
    this.set("newDaoFee", Value.fromBigInt(value));
  }
}

export class lpInitialized extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save lpInitialized entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type lpInitialized must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("lpInitialized", id.toString(), this);
    }
  }

  static load(id: string): lpInitialized | null {
    return changetype<lpInitialized | null>(store.get("lpInitialized", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get version(): i32 {
    let value = this.get("version");
    return value!.toI32();
  }

  set version(value: i32) {
    this.set("version", Value.fromI32(value));
  }
}

export class LiquidityAdded extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LiquidityAdded entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LiquidityAdded must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LiquidityAdded", id.toString(), this);
    }
  }

  static load(id: string): LiquidityAdded | null {
    return changetype<LiquidityAdded | null>(store.get("LiquidityAdded", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value!.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get leaf(): BigInt {
    let value = this.get("leaf");
    return value!.toBigInt();
  }

  set leaf(value: BigInt) {
    this.set("leaf", Value.fromBigInt(value));
  }
}

export class LiquidityRemoved extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LiquidityRemoved entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LiquidityRemoved must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LiquidityRemoved", id.toString(), this);
    }
  }

  static load(id: string): LiquidityRemoved | null {
    return changetype<LiquidityRemoved | null>(
      store.get("LiquidityRemoved", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value!.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get leaf(): BigInt {
    let value = this.get("leaf");
    return value!.toBigInt();
  }

  set leaf(value: BigInt) {
    this.set("leaf", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class LiquidityRequested extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LiquidityRequested entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LiquidityRequested must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LiquidityRequested", id.toString(), this);
    }
  }

  static load(id: string): LiquidityRequested | null {
    return changetype<LiquidityRequested | null>(
      store.get("LiquidityRequested", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get requestWallet(): Bytes {
    let value = this.get("requestWallet");
    return value!.toBytes();
  }

  set requestWallet(value: Bytes) {
    this.set("requestWallet", Value.fromBytes(value));
  }

  get requestedValueLp(): BigInt {
    let value = this.get("requestedValueLp");
    return value!.toBigInt();
  }

  set requestedValueLp(value: BigInt) {
    this.set("requestedValueLp", Value.fromBigInt(value));
  }
}

export class MinDepoChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MinDepoChanged entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MinDepoChanged must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MinDepoChanged", id.toString(), this);
    }
  }

  static load(id: string): MinDepoChanged | null {
    return changetype<MinDepoChanged | null>(store.get("MinDepoChanged", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get newMinDepo(): BigInt {
    let value = this.get("newMinDepo");
    return value!.toBigInt();
  }

  set newMinDepo(value: BigInt) {
    this.set("newMinDepo", Value.fromBigInt(value));
  }
}

export class NewBet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NewBet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NewBet must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NewBet", id.toString(), this);
    }
  }

  static load(id: string): NewBet | null {
    return changetype<NewBet | null>(store.get("NewBet", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get betId(): BigInt {
    let value = this.get("betId");
    return value!.toBigInt();
  }

  set betId(value: BigInt) {
    this.set("betId", Value.fromBigInt(value));
  }

  get conditionId(): BigInt {
    let value = this.get("conditionId");
    return value!.toBigInt();
  }

  set conditionId(value: BigInt) {
    this.set("conditionId", Value.fromBigInt(value));
  }

  get outcomeId(): BigInt {
    let value = this.get("outcomeId");
    return value!.toBigInt();
  }

  set outcomeId(value: BigInt) {
    this.set("outcomeId", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get odds(): BigInt {
    let value = this.get("odds");
    return value!.toBigInt();
  }

  set odds(value: BigInt) {
    this.set("odds", Value.fromBigInt(value));
  }

  get fund1(): BigInt {
    let value = this.get("fund1");
    return value!.toBigInt();
  }

  set fund1(value: BigInt) {
    this.set("fund1", Value.fromBigInt(value));
  }

  get fund2(): BigInt {
    let value = this.get("fund2");
    return value!.toBigInt();
  }

  set fund2(value: BigInt) {
    this.set("fund2", Value.fromBigInt(value));
  }
}

export class OracleRewardChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OracleRewardChanged entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type OracleRewardChanged must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OracleRewardChanged", id.toString(), this);
    }
  }

  static load(id: string): OracleRewardChanged | null {
    return changetype<OracleRewardChanged | null>(
      store.get("OracleRewardChanged", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get newOracleFee(): BigInt {
    let value = this.get("newOracleFee");
    return value!.toBigInt();
  }

  set newOracleFee(value: BigInt) {
    this.set("newOracleFee", Value.fromBigInt(value));
  }
}

export class lpOwnershipTransferred extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save lpOwnershipTransferred entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type lpOwnershipTransferred must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("lpOwnershipTransferred", id.toString(), this);
    }
  }

  static load(id: string): lpOwnershipTransferred | null {
    return changetype<lpOwnershipTransferred | null>(
      store.get("lpOwnershipTransferred", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get previousOwner(): Bytes {
    let value = this.get("previousOwner");
    return value!.toBytes();
  }

  set previousOwner(value: Bytes) {
    this.set("previousOwner", Value.fromBytes(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    return value!.toBytes();
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }
}

export class PeriodChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PeriodChanged entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PeriodChanged must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PeriodChanged", id.toString(), this);
    }
  }

  static load(id: string): PeriodChanged | null {
    return changetype<PeriodChanged | null>(store.get("PeriodChanged", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get newPeriod(): BigInt {
    let value = this.get("newPeriod");
    return value!.toBigInt();
  }

  set newPeriod(value: BigInt) {
    this.set("newPeriod", Value.fromBigInt(value));
  }
}

export class ReinforcementAbilityChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReinforcementAbilityChanged entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReinforcementAbilityChanged must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ReinforcementAbilityChanged", id.toString(), this);
    }
  }

  static load(id: string): ReinforcementAbilityChanged | null {
    return changetype<ReinforcementAbilityChanged | null>(
      store.get("ReinforcementAbilityChanged", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get newReinforcementAbility(): BigInt {
    let value = this.get("newReinforcementAbility");
    return value!.toBigInt();
  }

  set newReinforcementAbility(value: BigInt) {
    this.set("newReinforcementAbility", Value.fromBigInt(value));
  }
}

export class Transfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Transfer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Transfer", id.toString(), this);
    }
  }

  static load(id: string): Transfer | null {
    return changetype<Transfer | null>(store.get("Transfer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }
}

export class WithdrawTimeoutChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save WithdrawTimeoutChanged entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type WithdrawTimeoutChanged must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("WithdrawTimeoutChanged", id.toString(), this);
    }
  }

  static load(id: string): WithdrawTimeoutChanged | null {
    return changetype<WithdrawTimeoutChanged | null>(
      store.get("WithdrawTimeoutChanged", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get newWithdrawTimeout(): BigInt {
    let value = this.get("newWithdrawTimeout");
    return value!.toBigInt();
  }

  set newWithdrawTimeout(value: BigInt) {
    this.set("newWithdrawTimeout", Value.fromBigInt(value));
  }
}

export class coreChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save coreChanged entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type coreChanged must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("coreChanged", id.toString(), this);
    }
  }

  static load(id: string): coreChanged | null {
    return changetype<coreChanged | null>(store.get("coreChanged", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get newCore(): Bytes {
    let value = this.get("newCore");
    return value!.toBytes();
  }

  set newCore(value: Bytes) {
    this.set("newCore", Value.fromBytes(value));
  }
}

export class Profit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Profit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Profit must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Profit", id.toString(), this);
    }
  }

  static load(id: string): Profit | null {
    return changetype<Profit | null>(store.get("Profit", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalValue(): BigInt {
    let value = this.get("totalValue");
    return value!.toBigInt();
  }

  set totalValue(value: BigInt) {
    this.set("totalValue", Value.fromBigInt(value));
  }
}
